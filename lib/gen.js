// Generated by CoffeeScript 1.3.3
var checkexists, eco, filed, fs, ghm, renderHtml, renderMarkdown, renderTemplate, wrench;

fs = require('fs');

eco = require('eco');

ghm = require('github-flavored-markdown');

filed = require('filed');

wrench = require('wrench');

renderMarkdown = function(proj, name) {
  var md;
  if (proj == null) {
    proj = '.';
  }
  md = fs.readFileSync("" + proj + "/pages" + name + ".md").toString();
  return ghm.parse(md);
};

renderHtml = function(name) {
  return fs.readFileSync("./pages" + name + ".html").toString();
};

renderTemplate = function(proj, body) {
  var template;
  if (proj == null) {
    proj = '.';
  }
  if (body == null) {
    body = "";
  }
  template = fs.readFileSync("" + proj + "/layout.html", "utf8");
  return eco.render(template, {
    body: body
  });
};

checkexists = function(name, cb) {
  return fs.stat(name, function(err, stat) {
    return cb(err != null ? false : true);
  });
};

module.exports = function(proj, cb) {
  var gen;
  if (proj == null) {
    proj = '.';
  }
  gen = "" + proj + "/gen";
  return checkexists(gen, function(exists) {
    var body, dir, ext, misc, page, pages, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    if (exists) {
      wrench.rmdirSyncRecursive(gen);
    }
    fs.mkdirSync(gen);
    pages = wrench.readdirSyncRecursive("" + proj + "/pages");
    for (_i = 0, _len = pages.length; _i < _len; _i++) {
      page = pages[_i];
      console.log(page);
      page = page.replace("pages/", '');
      ext = page.split('.')[1];
      if (ext === 'html') {
        body = renderHtml('/' + page.replace('.html', ''));
      } else if (ext === 'md') {
        body = renderMarkdown(proj, '/' + page.replace('.md', ''));
        page = page.replace('.md', '.html');
      } else {
        fs.mkdirSync("" + gen + "/" + page);
      }
      if (ext != null) {
        fs.writeFileSync("" + gen + "/" + page, renderTemplate(proj, body), 'utf8');
      }
    }
    _ref = ['images', 'javascripts', 'stylesheets', 'ico', 'img', 'js', 'css'];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      dir = _ref[_j];
      try {
        fs.mkdirSync("" + gen + "/" + dir);
        wrench.copyDirSyncRecursive("" + proj + "/" + dir, "" + gen + "/" + dir);
        console.log('copy assets');
      } catch (err) {
        console.log(err.message);
      }
    }
    _ref1 = ['404.html', 'robots.txt'];
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      misc = _ref1[_k];
      console.log('copy misc');
      fs.copyFileSync("" + proj + "/" + misc, "" + gen + "/" + misc);
    }
    console.log('Generated Static Site in the gen folder...');
    if (cb != null) {
      return cb(null, 'success');
    }
  });
};
