// Generated by CoffeeScript 1.3.3
var DEBUG, buildFiles, buildLayout, buildProjectFolder, copyAssets, coreFiles, eco, fs, log, project, template, wrench;

fs = require('fs');

wrench = require('wrench');

log = console.log;

eco = require('./util/eco');

DEBUG = process.env.NODE_ENV === 'debug';

coreFiles = ['server.js', 'package.json', 'robots.txt', '404.html'];

project = null;

template = null;

module.exports = function(proj, tmpl, cb) {
  var done, _ref;
  if (proj == null) {
    proj = null;
  }
  if (typeof tmpl === 'function') {
    cb = tmpl;
    tmpl = null;
  }
  if (proj == null) {
    return console.log('Project Name Required!');
  }
  _ref = [proj, tmpl || "skeleton"], project = _ref[0], template = _ref[1];
  done = function() {
    log('Done....');
    return cb(null, 'Done');
  };
  return buildProjectFolder(function() {
    return buildFiles(function() {
      return copyAssets(function() {
        return buildLayout(function() {
          return done();
        });
      });
    });
  });
};

buildProjectFolder = function(cb) {
  var _this = this;
  if (DEBUG) {
    log('Building Project Folder...');
  }
  return fs.exists("./" + project, function(exists) {
    if (exists) {
      wrench.rmdirSyncRecursive("./" + project);
    }
    fs.mkdirSync(project, 0x1ed);
    if (cb != null) {
      return cb(null);
    }
  });
};

buildFiles = function(cb) {
  var html, tmp, _i, _len;
  if (DEBUG) {
    log('Building Files...');
  }
  for (_i = 0, _len = coreFiles.length; _i < _len; _i++) {
    tmp = coreFiles[_i];
    html = eco(tmp, {
      title: project
    });
    fs.writeFileSync("./" + project + "/" + tmp, html, 'utf8');
  }
  if (cb != null) {
    return cb();
  }
};

buildLayout = function(cb) {
  var html;
  if (DEBUG) {
    log('Building Layout...');
  }
  html = eco("" + template + "/layout.html", {
    title: project
  });
  fs.writeFileSync("./" + project + "/layout.html", html);
  return cb(null);
};

copyAssets = function(cb) {
  var copy, dir, _i, _len, _ref;
  if (DEBUG) {
    log('Copying Assests...');
  }
  copy = function(dir) {
    return fs.exists("" + __dirname + "/../templates/" + template + "/" + dir, function(exists) {
      try {
        fs.mkdirSync("./" + project + "/" + dir);
        return wrench.copyDirSyncRecursive("" + __dirname + "/../templates/" + template + "/" + dir, "./" + project + "/" + dir);
      } catch (err) {
        if (DEBUG) {
          return console.log(err.message);
        }
      }
    });
  };
  _ref = ['images', 'javascripts', 'stylesheets', 'ico', 'img', 'js', 'css', 'pages'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    dir = _ref[_i];
    copy(dir);
  }
  return cb(null);
};
